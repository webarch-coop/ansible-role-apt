# Copyright 2019-2024 Chris Croome
#
# This file is part of the Webarchitects apt Ansible role.
#
# The Webarchitects apt Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects apt Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects apt Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Apt checks
  block:

    - name: Print ansible_facts.distribution
      ansible.builtin.debug:
        var: ansible_facts.distribution
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Print ansible_facts.distribution_release
      ansible.builtin.debug:
        var: ansible_facts.distribution_release
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Print the distros listed in apt_default_config
      ansible.builtin.debug:
        var: apt_default_config | community.general.json_query('[].distro')
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Print the distros listed in apt_pkgs
      ansible.builtin.debug:
        var: apt_pkgs | community.general.json_query('[].distro')
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Distro check in a block to allow a rescue
      block:

        - name: Check that the distro and version is supported
          ansible.builtin.assert:
            that:
              - ansible_facts.distribution is regex('^Debian|Ubuntu$')
              - ansible_facts.distribution_release in (apt_default_config | community.general.json_query('[].distro'))
              - ansible_facts.distribution_release in (apt_pkgs | community.general.json_query('[].distro'))
            quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

      rescue:

        - name: Print ansible_facts.distribution
          ansible.builtin.debug:
            var: ansible_facts.distribution

        - name: Print ansible_facts.distribution_release
          ansible.builtin.debug:
            var: ansible_facts.distribution_release

        - name: Print apt_default_config
          ansible.builtin.debug:
            var: apt_default_config

        - name: Print the distros listed in apt_default_config
          ansible.builtin.debug:
            var: apt_default_config | community.general.json_query('[].distro')

        - name: Print apt_pkgs
          ansible.builtin.debug:
            var: apt_pkgs

        - name: Print the distros listed in apt_pkgs
          ansible.builtin.debug:
            var: apt_pkgs | community.general.json_query('[].distro')

        - name: Fail due to erors in checking if the distro and version are supported
          ansible.builtin.fail:
            msg: >-
              This role doesn't appear to support the version of Linux that {{ inventory_hostname }} is running, please check the debugging information
              above to see if {{ ansible_facts.distribution }} {{ ansible_facts.distribution_release }} is listed above.

    - name: Check apt_distro
      block:

        - name: Print apt_distro
          ansible.builtin.debug:
            var: apt_distro
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

        - name: Check that the apt_distro is supported
          ansible.builtin.assert:
            that:
              - apt_distro in (apt_default_config | community.general.json_query('[].distro'))
              - apt_distro in (apt_pkgs | community.general.json_query('[].distro'))
            quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

        - name: Fail if the checked distro version doesn't match the specified value of apt_distro
          ansible.builtin.fail:
            msg: >-
              The distro was detected as {{ ansible_facts.distribution_release }} but you are asking for the server to be
              configured for {{ apt_distro }}.
          when:
            - apt_distro != ansible_facts.distribution_release
            - not apt_distro_switch | bool

      when: apt_distro is defined

    - name: Warning and tasks for switching distros
      block:

        - name: Print a warning the the distro is being changed
          ansible.builtin.debug:
            msg: "WARNING: Updating distro from {{ ansible_facts.distribution_release }} to {{ apt_distro }}."

        - name: Run apt-get --allow-releaseinfo-change update
          ansible.builtin.command: apt-get --allow-releaseinfo-change update
          changed_when: true

      when:
        - apt_distro is defined
        - apt_distro != ansible_facts.distribution_release
        - apt_distro_switch is defined
        - apt_distro_switch | bool

    - name: Set apt_distro if not defined
      ansible.builtin.set_fact:
        apt_distro: "{{ ansible_facts.distribution_release }}"
      when: apt_distro is not defined

    - name: Check the processor architecture when ansible_facts.ansible_local.dpkg.arch is not defined
      ansible.builtin.command: dpkg --print-architecture
      check_mode: false
      changed_when: false
      register: apt_dpkg_architecture
      when: ansible_facts.ansible_local.dpkg.arch is not defined

    - name: Set a fact for the processor architecture
      ansible.builtin.set_fact:
        apt_architecture: >-
          {% if ansible_facts.ansible_local.dpkg.arch is defined %}
          {{- ansible_facts.ansible_local.dpkg.arch -}}
          {% elif apt_dpkg_architecture is defined %}
          {{- apt_dpkg_architecture.stdout -}}
          {% endif %}

    - name: Print apt_architecture
      ansible.builtin.debug:
        var: apt_architecture
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: The apt_default_config, apt_lists and apt_sources variables should not be set for hosts
      ansible.builtin.assert:
        that:
          - hostvars[inventory_hostname].apt_default_config is not defined
          - hostvars[inventory_hostname].apt_lists is not defined
          - hostvars[inventory_hostname].apt_sources is not defined
        quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
        fail_msg: "The internal variables apt_default_config, apt_lists and apt_sources should nto be set at a host level, use apt_config."

    - name: Set a fact for the combined apt config when apt_config is not defined
      ansible.builtin.set_fact:
        apt_combined_config: "{{ apt_default_config }}"
      when: apt_config is not defined

    - name: Set a fact for the combined apt config when apt_config is defined
      ansible.builtin.set_fact:
        apt_combined_config: "{{ apt_config | ansible.builtin.combine(apt_default_config, recursive=true) }}"
      when: apt_config is defined

    - name: Print apt_combined_config
      ansible.builtin.debug:
        var: apt_combined_config
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for the apt lists and sources config based on the apt_distro
      ansible.builtin.set_fact:
        apt_lists: "{{ apt_combined_config | community.general.json_query(apt_lists_json_query) }}"
        apt_sources: "{{ apt_combined_config | community.general.json_query(apt_sources_json_query) }}"
      vars:
        apt_lists_json_query: "[?distro=='{{ apt_distro }}'].lists|[0]"
        apt_sources_json_query: "[?distro=='{{ apt_distro }}'].sources|[0]"

    - name: Print apt_lists
      ansible.builtin.debug:
        var: apt_lists
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Print apt_sources
      ansible.builtin.debug:
        var: apt_sources
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Apt sources checks
      ansible.builtin.include_tasks: check_sources.yml
      when:
        - apt_sources is defined
        - apt_sources != []
        - apt_sources | length > 0

    - name: Check the apt list variables
      ansible.builtin.assert:
        that:
          - apt_list.path is ansible.builtin.regex('^[/]etc[/]apt[/]')
          - apt_list.path is ansible.builtin.regex('[.]list$')
        quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
      loop: "{{ apt_lists }}"
      loop_control:
        loop_var: apt_list
        label: "{{ apt_list.path | ansible.builtin.basename }}"
      when:
        - apt_list.state is defined
        - apt_list.state == "present"
        - apt_lists is defined
        - apt_lists != []
        - apt_lists | length > 0

    - name: Include the .list and .sources file checks
      ansible.builtin.include_tasks: check_files.yml

  tags:
    - apt
...
