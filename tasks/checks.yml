# Copyright 2019-2024 Chris Croome
#
# This file is part of the Webarchitects apt Ansible role.
#
# The Webarchitects apt Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects apt Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects apt Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Apt checks
  block:

    - name: Print ansible_distribution
      ansible.builtin.debug:
        var: ansible_distribution
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Print ansible_distribution_release
      ansible.builtin.debug:
        var: ansible_distribution_release
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Check that the distro and version is supported
      ansible.builtin.assert:
        that:
          - ansible_distribution is regex('^Debian|Ubuntu$')
          - ansible_distribution_release in (apt_default_config | community.general.json_query('[].name'))
        quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

    - name: Print apt_distro
      ansible.builtin.debug:
        var: apt_distro
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
      when: apt_distro is defined

    - name: Fail if the checked distro version doesn't match the specified value of apt_distro
      ansible.builtin.fail:
        msg: "The distro was detected as {{ ansible_distribution_release }} but you are asking for the server to be configured for {{ apt_distro }}."
      when:
        - apt_distro is defined
        - apt_distro != ansible_distribution_release
        - not apt_distro_switch | bool

    - name: Warning and tasks for switching distros
      block:

        - name: Print a warning the the distro is being changed
          ansible.builtin.debug:
            msg: "WARNING: Updating distro from {{ ansible_distribution_release }} to {{ apt_distro }}."

        - name: Run apt-get --allow-releaseinfo-change update
          ansible.builtin.command: apt-get --allow-releaseinfo-change update
          changed_when: true

      when:
        - apt_distro_switch is defined
        - apt_distro_switch | bool

    - name: Set apt_distro if not defined
      ansible.builtin.set_fact:
        apt_distro: "{{ ansible_distribution_release }}"
      when: apt_distro is not defined

    - name: Check the processor architecture when ansible_local.dpkg.arch is not defined
      ansible.builtin.command: dpkg --print-architecture
      check_mode: false
      changed_when: false
      register: apt_dpkg_architecture
      when: ansible_local.dpkg.arch is not defined

    - name: Set a fact for the processor architecture
      ansible.builtin.set_fact:
        apt_architecture: >-
          {% if ansible_local.dpkg.arch is defined %}
          {{- ansible_local.dpkg.arch -}}
          {% elif apt_dpkg_architecture is defined %}
          {{- apt_dpkg_architecture.stdout -}}
          {% endif %}

    - name: Print apt_architecture
      ansible.builtin.debug:
        var: apt_architecture
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: The apt_default_config, apt_lists and apt_sources variables should not be set for hosts
      ansible.builtin.assert:
        that:
          - hostvars[inventory_hostname].apt_default_config is not defined
          - hostvars[inventory_hostname].apt_lists is not defined
          - hostvars[inventory_hostname].apt_sources is not defined
        quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
        fail_msg: "The internal variables apt_default_config, apt_lists and apt_sources should nto be set at a host level, use apt_config."

    - name: Set a fact for the combined apt config when apt_config is not defined
      ansible.builtin.set_fact:
        apt_combined_config: "{{ apt_default_config }}"
      when: apt_config is not defined

    - name: Set a fact for the combined apt config when apt_config is defined
      ansible.builtin.set_fact:
        apt_combined_config: "{{ apt_config | ansible.builtin.combine(apt_default_config, recursive=true) }}"
      when: apt_config is defined

    - name: Print apt_combined_config
      ansible.builtin.debug:
        var: apt_combined_config
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for the apt lists and sources config based on the apt_distro
      ansible.builtin.set_fact:
        apt_lists: "{{ apt_combined_config | community.general.json_query(apt_lists_json_query) }}"
        apt_sources: "{{ apt_combined_config | community.general.json_query(apt_sources_json_query) }}"
      vars:
        apt_lists_json_query: "[?name=='{{ apt_distro }}'].lists|[0]"
        apt_sources_json_query: "[?name=='{{ apt_distro }}'].sources|[0]"

    - name: Print apt_lists
      ansible.builtin.debug:
        var: apt_lists
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Print apt_sources
      ansible.builtin.debug:
        var: apt_sources
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Check apt source variables
      ansible.builtin.assert:
        that:
          - apt_source.types is defined
          - apt_source.uris is defined
          - apt_source.suites is defined
          - apt_source.components is defined
          - apt_source.signed_by is defined
        quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
      loop: "{{ apt_sources }}"
      loop_control:
        loop_var: apt_source
      when:
        - apt_sources is defined
        - apt_sources != []
        - apt_source.state is defined
        - apt_source.state == "present"

    - name: Check apt sources signed_by keyrings
      ansible.builtin.stat:
        path: "{{ apt_key }}"
      loop: "{{ apt_sources | community.general.json_query('[].signed_by') | ansible.builtin.unique }}"
      loop_control:
        loop_var: apt_key
        label: "{{ apt_key | ansible.builtin.basename }}"
      register: apt_signed_by_paths
      when:
        - apt_key is ansible.builtin.regex('^[/]')
        - apt_sources | community.general.json_query('[].signed_by') | ansible.builtin.unique != []
        - apt_sources is defined
        - apt_sources != []

    - name: Print apt_signed_by_paths.results
      ansible.builtin.debug:
        var: apt_signed_by_paths.results
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      when: apt_signed_by_paths is defined

    - name: All apt keyrings files need to exist and be of the MIME type application/pgp-keys
      ansible.builtin.assert:
        that:
          - apt_signed_by_path.stat.exists | bool
          - apt_signed_by_path.stat.mimetype == "application/pgp-keys"
        quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
        fail_msg: "Apt signed_by keyring files need to exist."
      loop: "{{ apt_signed_by_paths.results }}"
      loop_control:
        loop_var: apt_signed_by_path
        label: "{{ apt_signed_by_path.invocation.module_args.path | ansible.builtin.basename }}"

    - name: Check the apt list variables
      ansible.builtin.assert:
        that:
          - apt_list.path is ansible.builtin.regex('^[/]etc[/]apt[/]')
          - apt_list.path is ansible.builtin.regex('[.]list$')
        quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
      loop: "{{ apt_lists }}"
      loop_control:
        loop_var: apt_list
      when:
        - apt_lists is defined
        - apt_lists != []
        - apt_list.state is defined
        - apt_list.state == "present"

    - name: Include the .list and .sources file checks
      ansible.builtin.include_tasks: check_files.yml

  tags:
    - apt
...
